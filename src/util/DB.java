package util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class DB {

	public static Connection getConn()
	{
		Connection conn=null;
		try
		{
			Class.forName("com.mysql.jdbc.Driver");
			String url="jdbc:mysql://localhost:3306/shopping?useSSL=false";//jdbc与mysql之间是冒号
			conn=DriverManager.getConnection(url,"root","239338");	
		}
		catch(ClassNotFoundException e)
		{
			e.printStackTrace();
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		return conn;
	}
	
	public static Statement getStmt(Connection conn)
	{
		Statement stmt=null;
		try
		{
			if(conn!=null)
			{
				stmt=conn.createStatement();
			}
			
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		return stmt;
	}
	
	public static PreparedStatement getPstmt(Connection conn,String sql)
	{
		PreparedStatement pstmt=null;
		try
		{
			if(conn!=null)
			{
				pstmt=conn.prepareStatement(sql);
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		return pstmt;
	}
	
	public static PreparedStatement getPstmt(Connection conn,String sql,int autoGeneratedKeys)
	{
		PreparedStatement pstmt=null;
		try
		{
			if(conn!=null)
			{
				pstmt=conn.prepareStatement(sql,autoGeneratedKeys);
				//创建一个默认 PreparedStatement 对象，该对象能获取自动生成的键
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		return pstmt;
	}
	
	public static ResultSet getRs(Statement stmt,String sql)
	{
		ResultSet rs=null;
		try
		{
			if(stmt!=null)
			{
				rs=stmt.executeQuery(sql);
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		return rs;
	}
	
	public static void executeUpdate(Statement stmt,String sql)
	{
		try
		{
			if(stmt!=null)
			{
				stmt.executeUpdate(sql);
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
	}
	
	public static void close(Connection conn)
	{
		try
		{
			if(conn!=null)
			{
				conn.close();
				conn=null;
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
	}
	
	public static void close(Statement stmt)
	//同样可以关闭PreparedStatement，因为PreparedStatement是Statement的子接口
	{
		try
		{
			if(stmt!=null)
			{
				stmt.close();
				stmt=null;
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
	}
	
	public static void close(ResultSet rs)
	{
		try
		{
			if(rs!=null)
			{
				rs.close();
				rs=null;
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
	}
}
